import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.subplots as sp
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import xml.etree.ElementTree as ET
import json
import re
import numpy as np
from PIL import Image
import io
import base64

# Configuration de la page
st.set_page_config(
    page_title="üåø Tisanes R√©unionnaises - Plateforme Expert",
    page_icon="üçÉ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© avanc√©
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        background: linear-gradient(135deg, #2E8B57 0%, #3CB371 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: 800;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .section-header {
        font-size: 2.2rem;
        color: #2E8B57;
        margin: 2rem 0 1rem 0;
        font-weight: 700;
        border-left: 5px solid #2E8B57;
        padding-left: 15px;
    }
    .plant-card {
        background: linear-gradient(135deg, #f8fff8 0%, #e8f5e8 100%);
        border-radius: 15px;
        padding: 25px;
        margin: 15px 0;
        border-left: 6px solid #2E8B57;
        box-shadow: 0 4px 15px rgba(46, 139, 87, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .plant-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(46, 139, 87, 0.15);
    }
    .benefit-badge {
        background: linear-gradient(135deg, #2E8B57 0%, #4CAF50 100%);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        margin: 3px;
        display: inline-block;
        font-size: 0.8rem;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .source-badge {
        background: linear-gradient(135deg, #1a73e8 0%, #4285f4 100%);
        color: white;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.75rem;
        margin-left: 5px;
        font-weight: 600;
    }
    .ird-badge {
        background: linear-gradient(135deg, #0055A4 0%, #1a73e8 100%);
        color: white;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.75rem;
        margin-left: 5px;
        font-weight: 600;
    }
    .tnu-badge {
        background: linear-gradient(135deg, #8B4513 0%, #A0522D 100%);
        color: white;
        padding: 4px 10px;
        border-radius: 15px;
        font-size: 0.75rem;
        margin-left: 5px;
        font-weight: 600;
    }
    .search-box {
        background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
        padding: 25px;
        border-radius: 15px;
        border: 2px solid #1a73e8;
        margin-bottom: 25px;
        box-shadow: 0 4px 15px rgba(26, 115, 232, 0.1);
    }
    .search-result {
        background: linear-gradient(135deg, #e6f7ff 0%, #f0f8ff 100%);
        padding: 20px;
        border-radius: 12px;
        margin: 12px 0;
        border-left: 5px solid #1a73e8;
        box-shadow: 0 3px 10px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }
    .search-result:hover {
        transform: translateX(5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.12);
    }
    .metric-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
        transition: transform 0.3s ease;
    }
    .metric-card:hover {
        transform: translateY(-3px);
    }
    .sidebar-emoji {
        font-size: 5rem;
        text-align: center;
        margin-bottom: 1.5rem;
        animation: float 3s ease-in-out infinite;
    }
    @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
    }
    .progress-bar {
        background: linear-gradient(135deg, #2E8B57 0%, #4CAF50 100%);
        height: 6px;
        border-radius: 3px;
        margin: 5px 0;
    }
    .ingredient-chip {
        background: #e8f5e8;
        color: #2E8B57;
        padding: 5px 10px;
        border-radius: 15px;
        margin: 2px;
        display: inline-block;
        font-size: 0.8rem;
        border: 1px solid #2E8B57;
    }
    .dark-text {
        color: #333333 !important;
        font-weight: 600;
    }
</style>
""", unsafe_allow_html=True)

# Donn√©es des plantes compl√®tes
plantes_data = [
    {
        'Plante': 'Choca (Ayapana)',
        'Nom Scientifique': 'Ayapana triplinervis',
        'Famille': 'Asteraceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Amer, herbac√©',
        'Intensit√©': 4,
        'Popularit√©': 9,
        'Raret√©': 2,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, zones humides',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Digestive', 'F√©brifuge', 'Antioxydante', 'D√©congestionnante'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '1 an √† l\'abri de la lumi√®re'
    },
    {
        'Plante': 'Tangor',
        'Nom Scientifique': 'Citrus reticulata',
        'Famille': 'Rutaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Fruit√©, doux',
        'Intensit√©': 2,
        'Popularit√©': 8,
        'Raret√©': 1,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, vergers',
        'Culture': 'Tr√®s facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Calmante', 'S√©dative', 'Digestive', 'Riche en vitamine C'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '6 mois'
    },
    {
        'Plante': 'Citronnelle',
        'Nom Scientifique': 'Cymbopogon citratus',
        'Famille': 'Poaceae',
        'Partie Utilis√©e': 'Tiges et feuilles',
        'Go√ªt': 'Frais, citronn√©',
        'Intensit√©': 3,
        'Popularit√©': 7,
        'Raret√©': 1,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, potagers',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Digestive', 'F√©brifuge', 'Anti-inflammatoire', 'Rafra√Æchissante'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '8 mois'
    },
    {
        'Plante': 'V√©tiver',
        'Nom Scientifique': 'Chrysopogon zizanioides',
        'Famille': 'Poaceae',
        'Partie Utilis√©e': 'Racines',
        'Go√ªt': 'Bois√©, terreux',
        'Intensit√©': 4,
        'Popularit√©': 6,
        'Raret√©': 3,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, zones arides',
        'Culture': 'Moyenne',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Digestive', 'Anti-naus√©euse', 'Apaisante', 'Sudorifique'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '2 ans'
    },
    {
        'Plante': 'Gingembre',
        'Nom Scientifique': 'Zingiber officinale',
        'Famille': 'Zingiberaceae',
        'Partie Utilis√©e': 'Racine',
        'Go√ªt': 'Piquant, √©pic√©',
        'Intensit√©': 5,
        'Popularit√©': 7,
        'Raret√©': 1,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, potagers',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Tonifiante', 'Anti-naus√©euse', 'Anti-inflammatoire', 'Stimulante'],
        'Contre-indications': '√Ä √©viter en cas d\'ulc√®re',
        'Conservation': '3 mois'
    },
    {
        'Plante': 'Curcuma',
        'Nom Scientifique': 'Curcuma longa',
        'Famille': 'Zingiberaceae',
        'Partie Utilis√©e': 'Racine',
        'Go√ªt': 'Terreux, poivr√©',
        'Intensit√©': 3,
        'Popularit√©': 5,
        'Raret√©': 2,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins',
        'Culture': 'Moyenne',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Anti-inflammatoire', 'Antioxydante', 'H√©patoprotectrice', 'Digestive'],
        'Contre-indications': 'Prudence en cas de calculs biliaires',
        'Conservation': '6 mois'
    },
    {
        'Plante': 'Faham',
        'Nom Scientifique': 'Jumellea fragrans',
        'Famille': 'Orchidaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Complexe, mielleux',
        'Intensit√©': 4,
        'Popularit√©': 3,
        'Raret√©': 5,
        'Saison': 'Saison s√®che',
        'Habitat': 'For√™ts humides',
        'Culture': 'Difficile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Aphrodisiaque', 'Tonique', 'Expectorante', 'Stimulante'],
        'Contre-indications': 'Usage mod√©r√©',
        'Conservation': '1 an'
    },
    {
        'Plante': 'Quinquina',
        'Nom Scientifique': 'Cinchona officinalis',
        'Famille': 'Rubiaceae',
        'Partie Utilis√©e': '√âcorce',
        'Go√ªt': 'Tr√®s amer',
        'Intensit√©': 5,
        'Popularit√©': 4,
        'Raret√©': 4,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins botaniques',
        'Culture': 'Difficile',
        'Source': 'IRD ThesIndigo',
        'IRD_URI': 'https://uri.ird.fr/so/kos/thesindigo/75406',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['F√©brifuge', 'Antipalud√©enne', 'Tonique am√®re', 'Stomachique'],
        'Contre-indications': 'D√©conseill√© aux femmes enceintes',
        'Conservation': '2 ans'
    },
    {
        'Plante': 'Brin de Songe',
        'Nom Scientifique': 'Phyllanthus amarus',
        'Famille': 'Phyllanthaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Amer, astringent',
        'Intensit√©': 4,
        'Popularit√©': 6,
        'Raret√©': 3,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, zones sauvages',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Diur√©tique', 'H√©patoprotecteur', 'Antidiab√©tique', 'Anti-inflammatoire'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '1 an'
    },
    {
        'Plante': 'Liane Jaune',
        'Nom Scientifique': 'Coptosperma borbonica',
        'Famille': 'Rubiaceae',
        'Partie Utilis√©e': '√âcorce',
        'Go√ªt': 'Amer, tannique',
        'Intensit√©': 5,
        'Popularit√©': 5,
        'Raret√©': 4,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'For√™ts',
        'Culture': 'Difficile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['F√©brifuge', 'Antipalud√©en', 'Digestif', 'Tonique'],
        'Contre-indications': 'Usage mod√©r√©',
        'Conservation': '2 ans'
    },
    {
        'Plante': 'Romarin',
        'Nom Scientifique': 'Rosmarinus officinalis',
        'Famille': 'Lamiaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Aromatique, camphr√©',
        'Intensit√©': 3,
        'Popularit√©': 6,
        'Raret√©': 1,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, zones s√®ches',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Stimulante', 'Antioxydante', 'Digestive', 'Tonique'],
        'Contre-indications': '√âviter fortes doses pendant grossesse',
        'Conservation': '1 an'
    },
    {
        'Plante': 'Menthe',
        'Nom Scientifique': 'Mentha spicata',
        'Famille': 'Lamiaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Frais, menthol√©',
        'Intensit√©': 3,
        'Popularit√©': 8,
        'Raret√©': 1,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, zones humides',
        'Culture': 'Tr√®s facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Digestive', 'Rafra√Æchissante', 'Antispasmodique', 'Stimulante'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '6 mois'
    },
    {
        'Plante': 'Basilic',
        'Nom Scientifique': 'Ocimum basilicum',
        'Famille': 'Lamiaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Aromatique, doux',
        'Intensit√©': 2,
        'Popularit√©': 7,
        'Raret√©': 1,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Jardins, potagers',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Digestive', 'Calmante', 'Antioxydante', 'Anti-stress'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '6 mois'
    },
    {
        'Plante': 'Caf√© Marron',
        'Nom Scientifique': 'Psychotria psy chotria',
        'Famille': 'Rubiaceae',
        'Partie Utilis√©e': 'Feuilles, √©corce',
        'Go√ªt': 'Amer, astringent',
        'Intensit√©': 4,
        'Popularit√©': 4,
        'Raret√©': 4,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'For√™ts humides',
        'Culture': 'Difficile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['F√©brifuge', 'Tonique', 'Digestive', 'Antioxydante'],
        'Contre-indications': 'Usage mod√©r√©',
        'Conservation': '1 an'
    },
    {
        'Plante': 'Bois de rongue',
        'Nom Scientifique': 'Psiadia altissima',
        'Famille': 'Asteraceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Amer, aromatique',
        'Intensit√©': 4,
        'Popularit√©': 3,
        'Raret√©': 4,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'For√™ts de montagne',
        'Culture': 'Difficile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['F√©brifuge', 'Anti-inflammatoire', 'Digestive'],
        'Contre-indications': 'Usage traditionnel contr√¥l√©',
        'Conservation': '1 an'
    },
    {
        'Plante': 'Bois de balais',
        'Nom Scientifique': 'Dodonaea viscosa',
        'Famille': 'Sapindaceae',
        'Partie Utilis√©e': 'Feuilles',
        'Go√ªt': 'Amer, astringent',
        'Intensit√©': 3,
        'Popularit√©': 4,
        'Raret√©': 3,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'Zones s√®ches',
        'Culture': 'Facile',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Anti-inflammatoire', 'Astringente', 'F√©brifuge'],
        'Contre-indications': 'Aucune connue',
        'Conservation': '1 an'
    },
    {
        'Plante': 'Bois d\'ortie',
        'Nom Scientifique': 'Obetia ficifolia',
        'Famille': 'Urticaceae',
        'Partie Utilis√©e': 'Feuilles, √©corce',
        'Go√ªt': 'L√©g√®rement piquant',
        'Intensit√©': 3,
        'Popularit√©': 3,
        'Raret√©': 4,
        'Saison': 'Toute l\'ann√©e',
        'Habitat': 'For√™ts s√®ches',
        'Culture': 'Moyenne',
        'Source': 'APLAMEDOM',
        'IRD_URI': '',
        'TNU_References': ['056', '076'],
        'Propri√©t√©s': ['Diur√©tique', 'Anti-rhumatismal', 'D√©puratif'],
        'Contre-indications': 'Peut irriter la peau',
        'Conservation': '1 an'
    }
]

# TOUS LES M√âLANGES TRADITIONNELS COMPLETS
melanges_data = [
    {
        'Nom': 'Digestion Facile',
        'Plantes': ['Choca (Ayapana)', 'V√©tiver', 'Citronnelle'],
        'Proportions': {'Choca (Ayapana)': 2, 'V√©tiver': 1, 'Citronnelle': 1},
        'Instructions': 'Infusion 10 min - Boire apr√®s le repas',
        'Bienfaits': ['Digestion', 'Ballonnements', 'Naus√©es'],
        'Source': 'Tradition R√©unionnaise + APLAMEDOM',
        'TNU_References': ['056', '076'],
        'Usage': 'Quotidien',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '15 min',
        'Score efficacit√©': 9,
        'Score go√ªt': 7,
        'Notes': 'M√©lange de base pour une digestion optimale',
        'Variantes': ['Ajouter du gingembre pour plus de tonicit√©'],
        'Histoire': 'Utilis√© traditionnellement apr√®s les repas de f√™te'
    },
    {
        'Nom': 'Nuit Paisible',
        'Plantes': ['Tangor', 'Citronnelle'],
        'Proportions': {'Tangor': 3, 'Citronnelle': 1},
        'Instructions': 'Infusion 5-7 min - Boire avant le coucher',
        'Bienfaits': ['Sommeil', 'Relaxation', 'Stress'],
        'Source': 'Tradition R√©unionnaise + APLAMEDOM',
        'TNU_References': ['056', '076'],
        'Usage': 'Soir',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '10 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 8,
        'Notes': 'Id√©al pour une nuit reposante',
        'Variantes': ['Ajouter une pinc√©e de vanille'],
        'Histoire': 'Recette familiale transmise de g√©n√©ration en g√©n√©ration'
    },
    {
        'Nom': 'Boost Immunit√©',
        'Plantes': ['Choca (Ayapana)', 'Gingembre', 'Citronnelle', 'Quinquina'],
        'Proportions': {'Choca (Ayapana)': 2, 'Gingembre': 1, 'Citronnelle': 1, 'Quinquina': 0.5},
        'Instructions': 'D√©coction 15 min - Boire 2-3 fois/jour',
        'Bienfaits': ['Grippe', 'Fi√®vre', 'Fatigue', 'Immunit√©'],
        'Source': 'Synth√®se Traditionnelle + IRD',
        'TNU_References': ['056', '076'],
        'Usage': 'Maladie',
        'Saison': 'Hiver',
        'Difficult√©': 'Moyenne',
        'Temps pr√©paration': '20 min',
        'Score efficacit√©': 9,
        'Score go√ªt': 6,
        'Notes': 'M√©lange puissant pour les √©tats grippaux',
        'Variantes': ['Remplacer Quinquina par Liane Jaune si indisponible'],
        'Histoire': 'Inspir√© des rem√®des traditionnels contre la fi√®vre'
    },
    {
        'Nom': 'Tonique √ânerg√©tique',
        'Plantes': ['Gingembre', 'Curcuma', 'Faham'],
        'Proportions': {'Gingembre': 2, 'Curcuma': 1, 'Faham': 0.5},
        'Instructions': 'D√©coction 20 min - Boire le matin',
        'Bienfaits': ['√ânergie', 'Vitalit√©', 'Circulation'],
        'Source': 'Tradition R√©unionnaise',
        'TNU_References': ['056', '076'],
        'Usage': 'Matin',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Moyenne',
        'Temps pr√©paration': '25 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 7,
        'Notes': 'Parfait pour commencer la journ√©e avec √©nergie',
        'Variantes': ['Ajouter du miel pour adoucir'],
        'Histoire': 'Utilis√© par les travailleurs pour booster leur √©nergie'
    },
    {
        'Nom': 'D√©tox Foie',
        'Plantes': ['Choca (Ayapana)', 'Brin de Songe', 'Citronnelle'],
        'Proportions': {'Choca (Ayapana)': 2, 'Brin de Songe': 1, 'Citronnelle': 1},
        'Instructions': 'Infusion 10 min - Boire √† jeun',
        'Bienfaits': ['D√©toxification', 'Foie', 'Digestion'],
        'Source': 'Tradition R√©unionnaise',
        'TNU_References': ['056', '076'],
        'Usage': 'Cure',
        'Saison': 'Printemps',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '15 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 6,
        'Notes': 'Cure d√©tox de 3 semaines recommand√©e',
        'Variantes': ['Ajouter du romarin pour renforcer l\'effet d√©tox'],
        'Histoire': 'Cure traditionnelle de printemps'
    },
    {
        'Nom': 'Anti-Grippe Puissant',
        'Plantes': ['Quinquina', 'Gingembre', 'Citronnelle', 'Liane Jaune'],
        'Proportions': {'Quinquina': 1, 'Gingembre': 1, 'Citronnelle': 1, 'Liane Jaune': 0.5},
        'Instructions': 'D√©coction 20 min - Boire 3 fois/jour',
        'Bienfaits': ['Grippe', 'Fi√®vre', 'Infection'],
        'Source': 'M√©decine Traditionnelle + IRD',
        'TNU_References': ['056', '076'],
        'Usage': 'Maladie aigu√´',
        'Saison': 'Hiver',
        'Difficult√©': 'Moyenne',
        'Temps pr√©paration': '25 min',
        'Score efficacit√©': 9,
        'Score go√ªt': 5,
        'Notes': 'Go√ªt tr√®s amer mais tr√®s efficace',
        'Variantes': ['Ajouter du miel pour masquer l\'amertume'],
        'Histoire': 'Rem√®de ancestral contre les fi√®vres'
    },
    {
        'Nom': 'Calmant Doux',
        'Plantes': ['Tangor', 'V√©tiver'],
        'Proportions': {'Tangor': 2, 'V√©tiver': 1},
        'Instructions': 'Infusion 5 min - Boire au coucher',
        'Bienfaits': ['Anxi√©t√©', 'Stress', 'Insomnie'],
        'Source': 'Tradition Familiale',
        'TNU_References': ['056', '076'],
        'Usage': 'Soir',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '10 min',
        'Score efficacit√©': 7,
        'Score go√ªt': 8,
        'Notes': 'Doux et apaisant',
        'Variantes': ['Ajouter de la camomille pour plus d\'effet s√©datif'],
        'Histoire': 'Recette de grand-m√®re pour les nuits agit√©es'
    },
    {
        'Nom': 'Digestion Lourde',
        'Plantes': ['V√©tiver', 'Gingembre', 'Curcuma'],
        'Proportions': {'V√©tiver': 2, 'Gingembre': 1, 'Curcuma': 0.5},
        'Instructions': 'D√©coction 15 min - Boire apr√®s repas copieux',
        'Bienfaits': ['Digestion difficile', 'Lourdeurs', 'Ballonnements'],
        'Source': 'Tradition R√©unionnaise',
        'TNU_References': ['056', '076'],
        'Usage': 'Occasionnel',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '20 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 7,
        'Notes': 'Sp√©cial repas de f√™te',
        'Variantes': ['Ajouter des graines de fenouil'],
        'Histoire': 'Utilis√© apr√®s les grands repas familiaux'
    },
    {
        'Nom': 'Tisane Tous Risques',
        'Plantes': ['Choca (Ayapana)', 'Tangor', 'Citronnelle', 'V√©tiver'],
        'Proportions': {'Choca (Ayapana)': 2, 'Tangor': 1, 'Citronnelle': 1, 'V√©tiver': 1},
        'Instructions': 'Infusion 10 min - Boire 1-2 fois/jour',
        'Bienfaits': ['Pr√©vention', 'Bien-√™tre g√©n√©ral', 'Immunit√©'],
        'Source': 'Recette Familiale',
        'TNU_References': ['056', '076'],
        'Usage': 'Quotidien',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '15 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 8,
        'Notes': 'M√©lange √©quilibr√© pour tous les jours',
        'Variantes': ['Adapter les proportions selon les go√ªts'],
        'Histoire': 'Recette polyvalente transmise dans les familles'
    },
    {
        'Nom': 'Aphrodisiaque Cr√©ole',
        'Plantes': ['Faham', 'Gingembre', 'Curcuma'],
        'Proportions': {'Faham': 1, 'Gingembre': 1, 'Curcuma': 0.5},
        'Instructions': 'D√©coction 15 min - Boire le soir',
        'Bienfaits': ['Libido', '√ânergie', 'Vitalit√©'],
        'Source': 'Tradition Secr√®te',
        'TNU_References': ['056', '076'],
        'Usage': 'Occasionnel',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Moyenne',
        'Temps pr√©paration': '20 min',
        'Score efficacit√©': 7,
        'Score go√ªt': 6,
        'Notes': 'Effet tonifiant g√©n√©ral',
        'Variantes': ['Ajouter du ginseng pour potentialiser l\'effet'],
        'Histoire': 'Savoir traditionnel bien gard√©'
    },
    {
        'Nom': 'D√©congestionnant Respiratoire',
        'Plantes': ['Choca (Ayapana)', 'Citronnelle', 'Gingembre'],
        'Proportions': {'Choca (Ayapana)': 2, 'Citronnelle': 1, 'Gingembre': 1},
        'Instructions': 'Inhalation + infusion 10 min',
        'Bienfaits': ['Toux', 'Rhume', 'Congestion'],
        'Source': 'M√©decine Traditionnelle',
        'TNU_References': ['056', '076'],
        'Usage': 'Maladie',
        'Saison': 'Hiver',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '15 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 7,
        'Notes': 'Double action par inhalation et ingestion',
        'Variantes': ['Ajouter de l\'eucalyptus pour les inhalations'],
        'Histoire': 'Rem√®de complet pour les voies respiratoires'
    },
    {
        'Nom': 'Anti-Diarrh√©ique',
        'Plantes': ['Brin de Songe', 'V√©tiver', 'Curcuma'],
        'Proportions': {'Brin de Songe': 2, 'V√©tiver': 1, 'Curcuma': 0.5},
        'Instructions': 'D√©coction 15 min - Boire apr√®s chaque selle liquide',
        'Bienfaits': ['Diarrh√©e', 'Troubles intestinaux'],
        'Source': 'Usage Traditionnel',
        'TNU_References': ['056', '076'],
        'Usage': 'Curatif',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '20 min',
        'Score efficacit√©': 9,
        'Score go√ªt': 5,
        'Notes': 'Go√ªt amer mais tr√®s efficace',
        'Variantes': ['Diluer dans plus d\'eau si trop amer'],
        'Histoire': 'Utilis√© pour les troubles digestifs aigus'
    },
    {
        'Nom': 'Draineur R√©nal',
        'Plantes': ['Brin de Songe', 'Citronnelle', 'Tangor'],
        'Proportions': {'Brin de Songe': 2, 'Citronnelle': 1, 'Tangor': 1},
        'Instructions': 'Infusion 10 min - Boire matin et soir',
        'Bienfaits': ['Diur√©tique', 'Drainage', '√âlimination'],
        'Source': 'Tradition R√©unionnaise',
        'TNU_References': ['056', '076'],
        'Usage': 'Cure',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '15 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 7,
        'Notes': 'Favorise l\'√©limination des toxines',
        'Variantes': ['Augmenter la proportion de Brin de Songe pour plus d\'effet'],
        'Histoire': 'Utilis√© pour purifier l\'organisme'
    },
    {
        'Nom': 'Anti-Douleur Articulaire',
        'Plantes': ['Curcuma', 'Gingembre', 'Citronnelle'],
        'Proportions': {'Curcuma': 2, 'Gingembre': 1, 'Citronnelle': 1},
        'Instructions': 'D√©coction 20 min - Boire 2 fois/jour',
        'Bienfaits': ['Articulations', 'Inflammation', 'Douleur'],
        'Source': 'M√©decine Traditionnelle',
        'TNU_References': ['056', '076'],
        'Usage': 'Curatif',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Moyenne',
        'Temps pr√©paration': '25 min',
        'Score efficacit√©': 8,
        'Score go√ªt': 6,
        'Notes': 'Anti-inflammatoire naturel',
        'Variantes': ['Ajouter du poivre noir pour potentialiser la curcumine'],
        'Histoire': 'Rem√®de ancestral pour les douleurs articulaires'
    },
    {
        'Nom': 'Confort Menstruel',
        'Plantes': ['V√©tiver', 'Citronnelle', 'Tangor'],
        'Proportions': {'V√©tiver': 2, 'Citronnelle': 1, 'Tangor': 1},
        'Instructions': 'Infusion 10 min - Boire 3 fois/jour',
        'Bienfaits': ['Douleurs menstruelles', 'Spasmes', 'D√©tente'],
        'Source': 'Savoir F√©minin Traditionnel',
        'TNU_References': ['056', '076'],
        'Usage': 'Cyclique',
        'Saison': 'Toute l\'ann√©e',
        'Difficult√©': 'Facile',
        'Temps pr√©paration': '15 min',
        'Score efficacit√©': 7,
        'Score go√ªt': 8,
        'Notes': 'Apaisant et relaxant',
        'Variantes': ['Ajouter de l\'achill√©e millefeuille'],
        'Histoire': 'Transmis de m√®re en fille'
    }
]

# Donn√©es TNU
tnu_data = {
    '056': {
        'uri': 'https://uri.ird.fr/so/kos/tnu/056',
        'prefLabel': 'Plantes m√©dicinales - Usage traditionnel',
        'definition': 'Plantes utilis√©es dans la m√©decine traditionnelle r√©unionnaise',
        'url': 'https://ref-science.ird.fr/tnu/fr/page/056',
        'related_concepts': ['212443', '75406']
    },
    '076': {
        'uri': 'https://uri.ird.fr/so/kos/tnu/076',
        'prefLabel': 'Plantes aromatiques et m√©dicinales - Conservation',
        'definition': 'M√©thodes de conservation et pr√©servation des plantes m√©dicinales',
        'url': 'https://ref-science.ird.fr/tnu/fr/page/076',
        'related_concepts': ['212443', '214560']
    }
}

# Initialisation de l'√©tat de session
if 'favorites' not in st.session_state:
    st.session_state.favorites = []
if 'search_history' not in st.session_state:
    st.session_state.search_history = []
if 'user_notes' not in st.session_state:
    st.session_state.user_notes = {}
if 'user_preferences' not in st.session_state:
    st.session_state.user_preferences = {
        'benefits': [],
        'difficulty': 'Facile',
        'prep_time': 30
    }

# CORRECTION : Graphique r√©seau avec texte visible
def create_plant_network_graph():
    """Cr√©e un graphique de r√©seau des relations entre plantes et m√©langes avec texte visible"""
    try:
        fig = go.Figure()
        
        # Positions pr√©d√©finies pour une meilleure stabilit√©
        positions = {
            # Plantes
            'Choca (Ayapana)': (0, 4),
            'Tangor': (2, 4),
            'Citronnelle': (4, 4),
            'V√©tiver': (0, 2),
            'Gingembre': (2, 2),
            'Curcuma': (4, 2),
            'Faham': (1, 0),
            'Quinquina': (3, 0),
            'Brin de Songe': (0, 0),
            'Liane Jaune': (4, 0),
            'Romarin': (6, 4),
            'Menthe': (6, 2),
            'Basilic': (6, 0),
            # M√©langes
            'Digestion Facile': (8, 4),
            'Nuit Paisible': (10, 4),
            'Boost Immunit√©': (12, 4),
            'Tonique √ânerg√©tique': (8, 2),
            'D√©tox Foie': (10, 2),
            'Anti-Grippe Puissant': (12, 2),
            'Calmant Doux': (8, 0),
            'Digestion Lourde': (10, 0),
            'Tisane Tous Risques': (12, 0)
        }
        
        # Ajouter les n≈ìuds des plantes
        plant_x, plant_y, plant_names = [], [], []
        for plante in plantes_data:
            if plante['Plante'] in positions:
                x, y = positions[plante['Plante']]
                plant_x.append(x)
                plant_y.append(y)
                plant_names.append(plante['Plante'])
        
        fig.add_trace(go.Scatter(
            x=plant_x, y=plant_y,
            mode='markers+text',
            marker=dict(size=25, color='#2E8B57', line=dict(width=2, color='white')),
            text=plant_names,
            textposition="middle center",
            textfont=dict(color='black', size=10, family="Arial Black"),
            name='Plantes',
            hoverinfo='text'
        ))
        
        # Ajouter les n≈ìuds des m√©langes
        melange_x, melange_y, melange_names = [], [], []
        for melange in melanges_data[:9]:
            if melange['Nom'] in positions:
                x, y = positions[melange['Nom']]
                melange_x.append(x)
                melange_y.append(y)
                melange_names.append(melange['Nom'])
        
        fig.add_trace(go.Scatter(
            x=melange_x, y=melange_y,
            mode='markers+text',
            marker=dict(size=20, color='#1a73e8', line=dict(width=2, color='white')),
            text=melange_names,
            textposition="middle center",
            textfont=dict(color='black', size=9, family="Arial"),
            name='M√©langes',
            hoverinfo='text'
        ))
        
        # Ajouter les liens de mani√®re s√©curis√©e
        for melange in melanges_data[:9]:
            if melange['Nom'] in positions:
                melange_x, melange_y = positions[melange['Nom']]
                for plante in melange['Plantes']:
                    if plante in positions:
                        plante_x, plante_y = positions[plante]
                        fig.add_trace(go.Scatter(
                            x=[plante_x, melange_x], y=[plante_y, melange_y],
                            mode='lines',
                            line=dict(width=1.5, color='gray', dash='solid'),
                            showlegend=False,
                            hoverinfo='none'
                        ))
        
        fig.update_layout(
            title=dict(
                text="R√©seau des Plantes et M√©langes",
                x=0.5,
                font=dict(size=16, color='black')
            ),
            showlegend=True,
            height=600,
            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False, range=[-1, 14]),
            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False, range=[-1, 5]),
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(color='black')
        )
        
        return fig
    except Exception as e:
        st.error(f"Erreur dans la cr√©ation du graphique: {e}")
        return create_simple_fallback_chart()

def create_simple_fallback_chart():
    """Cr√©e un graphique de secours simple avec texte visible"""
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=[1, 2, 3], y=[4, 1, 2],
        mode='markers+text',
        marker=dict(size=20, color='#2E8B57'),
        text=['Plantes', 'M√©langes', 'Relations'],
        textposition="middle center",
        textfont=dict(color='black', size=12)
    ))
    fig.update_layout(
        title=dict(
            text="R√©seau des Connaissances",
            x=0.5,
            font=dict(color='black')
        ),
        height=400,
        plot_bgcolor='white',
        paper_bgcolor='white'
    )
    return fig

def create_seasonal_calendar():
    """Cr√©e un calendrier des saisons pour les plantes"""
    months = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Jun', 
              'Jul', 'Ao√ª', 'Sep', 'Oct', 'Nov', 'D√©c']
    
    data = []
    for plante in plantes_data:
        if plante['Saison'] == 'Toute l\'ann√©e':
            availability = [1] * 12
        elif plante['Saison'] == 'Hiver':
            availability = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]
        elif plante['Saison'] == '√ât√©':
            availability = [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0]
        else:
            availability = [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0]
        
        for i, avail in enumerate(availability):
            data.append({
                'Plante': plante['Plante'],
                'Mois': months[i],
                'Disponibilit√©': avail,
                'Saison': plante['Saison']
            })
    
    df = pd.DataFrame(data)
    
    fig = px.imshow(
        df.pivot(index='Plante', columns='Mois', values='Disponibilit√©'),
        title="Calendrier des Saisons des Plantes",
        color_continuous_scale=['lightgray', '#2E8B57'],
        aspect="auto"
    )
    
    return fig

def show_advanced_search():
    st.markdown('<div class="section-header">üîç Recherche Avanc√©e</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="search-box">', unsafe_allow_html=True)
    col1, col2 = st.columns([2, 1])
    
    with col1:
        search_query = st.text_input("üîé Recherche par mots-cl√©s:", placeholder="Ex: digestion, sommeil, fi√®vre...")
    
    with col2:
        search_type = st.selectbox("Type de recherche:", ["Plantes", "M√©langes", "Les deux"])
    
    # Filtres avanc√©s
    st.subheader("üéØ Filtres Avanc√©s")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        benefits_filter = st.multiselect(
            "Bienfaits recherch√©s:",
            list(set([benefit for m in melanges_data for benefit in m['Bienfaits']]))
        )
    
    with col2:
        difficulty_filter = st.selectbox(
            "Difficult√© max:",
            ["Toutes", "Facile", "Moyenne", "Difficile"]
        )
    
    with col3:
        prep_time_filter = st.slider("Temps de pr√©paration max (min):", 5, 60, 30)
    
    if st.button("üîç Lancer la recherche", type="primary"):
        results = advanced_search(
            search_query, 
            search_type, 
            benefits_filter, 
            difficulty_filter, 
            prep_time_filter
        )
        display_search_results(results)
    
    st.markdown('</div>', unsafe_allow_html=True)

def advanced_search(query, search_type, benefits, difficulty, prep_time):
    """Effectue une recherche avanc√©e"""
    results = []
    
    # Recherche dans les plantes
    if search_type in ["Plantes", "Les deux"]:
        for plante in plantes_data:
            score = 0
            
            # Recherche par mots-cl√©s
            if query:
                query_terms = query.lower().split()
                for term in query_terms:
                    if (term in plante['Plante'].lower() or 
                        term in plante['Nom Scientifique'].lower() or
                        term in plante['Go√ªt'].lower() or
                        any(term in prop.lower() for prop in plante['Propri√©t√©s'])):
                        score += 2
            
            # Filtre par bienfaits
            if benefits:
                matching_benefits = sum(1 for benefit in benefits if any(benefit.lower() in prop.lower() for prop in plante['Propri√©t√©s']))
                score += matching_benefits * 3
            
            if score > 0:
                results.append({
                    'type': 'Plante',
                    'data': plante,
                    'score': score
                })
    
    # Recherche dans les m√©langes
    if search_type in ["M√©langes", "Les deux"]:
        for melange in melanges_data:
            score = 0
            
            # Recherche par mots-cl√©s
            if query:
                query_terms = query.lower().split()
                for term in query_terms:
                    if (term in melange['Nom'].lower() or
                        term in melange['Instructions'].lower() or
                        any(term in benefit.lower() for benefit in melange['Bienfaits'])):
                        score += 2
            
            # Filtre par bienfaits
            if benefits:
                matching_benefits = sum(1 for benefit in benefits if benefit in melange['Bienfaits'])
                score += matching_benefits * 3
            
            # Filtre par difficult√©
            if difficulty != "Toutes" and melange['Difficult√©'] != difficulty:
                continue
            
            # Filtre par temps de pr√©paration
            prep_time_num = int(melange['Temps pr√©paration'].split()[0])
            if prep_time_num > prep_time:
                continue
            
            if score > 0:
                results.append({
                    'type': 'M√©lange',
                    'data': melange,
                    'score': score
                })
    
    # Trier par score
    results.sort(key=lambda x: x['score'], reverse=True)
    return results

def display_search_results(results):
    """Affiche les r√©sultats de recherche"""
    if not results:
        st.warning("üîç Aucun r√©sultat trouv√© pour votre recherche.")
        return
    
    st.success(f"üéØ **{len(results)} r√©sultats** trouv√©s pour votre recherche")
    
    for result in results:
        with st.container():
            st.markdown('<div class="search-result">', unsafe_allow_html=True)
            
            if result['type'] == 'Plante':
                plante = result['data']
                st.write(f"### üåø {plante['Plante']}")
                st.write(f"**Nom scientifique:** {plante['Nom Scientifique']}")
                st.write(f"**Famille:** {plante['Famille']}")
                st.write(f"**Propri√©t√©s:** {', '.join(plante['Propri√©t√©s'])}")
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚≠ê Ajouter aux favoris", key=f"search_fav_plant_{plante['Plante']}"):
                        if plante['Plante'] not in st.session_state.favorites:
                            st.session_state.favorites.append(plante['Plante'])
                            st.success("Ajout√© aux favoris!")
                
            else:  # M√©lange
                melange = result['data']
                st.write(f"### üçµ {melange['Nom']}")
                st.write(f"**Plantes:** {', '.join(melange['Plantes'])}")
                st.write(f"**Bienfaits:** {', '.join(melange['Bienfaits'])}")
                st.write(f"**Difficult√©:** {melange['Difficult√©']} - **Temps:** {melange['Temps pr√©paration']}")
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚≠ê Ajouter aux favoris", key=f"search_fav_melange_{melange['Nom']}"):
                        if melange['Nom'] not in st.session_state.favorites:
                            st.session_state.favorites.append(melange['Nom'])
                            st.success("Ajout√© aux favoris!")
                
            st.markdown('</div>', unsafe_allow_html=True)

def show_melanges_advanced():
    st.markdown('<div class="section-header">üß™ Tous les M√©langes Traditionnels</div>', unsafe_allow_html=True)
    
    st.info(f"**{len(melanges_data)} m√©langes traditionnels** document√©s et valid√©s - Patrimoine culturel r√©unionnais")
    
    # Filtres pour les m√©langes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        usage_filter = st.selectbox(
            "Usage:",
            ["Tous"] + list(set(m.get('Usage', 'Non sp√©cifi√©') for m in melanges_data))
        )
    
    with col2:
        difficulty_filter = st.selectbox(
            "Difficult√©:",
            ["Toutes"] + list(set(m.get('Difficult√©', 'Non sp√©cifi√©') for m in melanges_data))
        )
    
    with col3:
        season_filter = st.selectbox(
            "Saison:",
            ["Toutes"] + list(set(m.get('Saison', 'Non sp√©cifi√©') for m in melanges_data))
        )
    
    # Appliquer les filtres
    filtered_melanges = melanges_data.copy()
    
    if usage_filter != "Tous":
        filtered_melanges = [m for m in filtered_melanges if m.get('Usage') == usage_filter]
    
    if difficulty_filter != "Toutes":
        filtered_melanges = [m for m in filtered_melanges if m.get('Difficult√©') == difficulty_filter]
    
    if season_filter != "Toutes":
        filtered_melanges = [m for m in filtered_melanges if m.get('Saison') == season_filter]
    
    st.success(f"**{len(filtered_melanges)} m√©langes** correspondent √† vos crit√®res")
    
    # Affichage des m√©langes
    for i, melange in enumerate(filtered_melanges):
        with st.expander(f"üçµ {melange['Nom']} - ‚≠ê{melange['Score efficacit√©']}/10 - {melange['Usage']}", expanded=i < 3):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**üìù Description :** {melange.get('Notes', 'M√©lange traditionnel')}")
                
                st.write("**üåø Plantes utilis√©es :**")
                for plante, proportion in melange['Proportions'].items():
                    st.write(f"- {plante} : {proportion} part(s)")
                
                st.write(f"**üïí Instructions :** {melange['Instructions']}")
                
                st.write("**üíö Bienfaits principaux :**")
                for benefit in melange['Bienfaits']:
                    st.markdown(f'<span class="benefit-badge">{benefit}</span>', unsafe_allow_html=True)
                
                if melange.get('Variantes'):
                    st.write("**üîÑ Variantes :**")
                    for variante in melange['Variantes']:
                        st.write(f"- {variante}")
                
                if melange.get('Histoire'):
                    st.write(f"**üìñ Histoire :** {melange['Histoire']}")
            
            with col2:
                st.metric("Usage", melange.get('Usage', 'Non sp√©cifi√©'))
                st.metric("Difficult√©", melange.get('Difficult√©', 'Non sp√©cifi√©'))
                st.metric("Temps", melange.get('Temps pr√©paration', 'Non sp√©cifi√©'))
                
                # Barre de progression pour l'efficacit√©
                st.write("**Efficacit√© :**")
                efficiency = melange.get('Score efficacit√©', 0)
                st.markdown(f"""
                <div style="background: #f0f0f0; border-radius: 10px; padding: 3px;">
                    <div class="progress-bar" style="width: {efficiency * 10}%;"></div>
                </div>
                <small>{efficiency}/10</small>
                """, unsafe_allow_html=True)
                
                # Barre de progression pour le go√ªt
                st.write("**Go√ªt :**")
                gout = melange.get('Score go√ªt', 0)
                st.markdown(f"""
                <div style="background: #f0f0f0; border-radius: 10px; padding: 3px;">
                    <div style="background: linear-gradient(135deg, #FF6B6B 0%, #FFE66D 100%); height: 6px; border-radius: 3px; width: {gout * 10}%;"></div>
                </div>
                <small>{gout}/10</small>
                """, unsafe_allow_html=True)
                
                if st.button("‚≠ê Ajouter aux favoris", key=f"fav_{melange['Nom']}"):
                    if melange['Nom'] not in st.session_state.favorites:
                        st.session_state.favorites.append(melange['Nom'])
                        st.success("Ajout√© aux favoris!")
                    else:
                        st.info("D√©j√† dans vos favoris")

def show_plantes_advanced():
    st.markdown('<div class="section-header">üåø Toutes les Plantes M√©dicinales</div>', unsafe_allow_html=True)
    
    st.info(f"**{len(plantes_data)} plantes** document√©es et valid√©es - Patrimoine naturel r√©unionnais")
    
    # Filtres pour les plantes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        family_filter = st.selectbox(
            "Famille:",
            ["Toutes"] + list(set(p['Famille'] for p in plantes_data))
        )
    
    with col2:
        rarity_filter = st.selectbox(
            "Raret√©:",
            ["Toutes"] + list(set(p['Raret√©'] for p in plantes_data))
        )
    
    with col3:
        culture_filter = st.selectbox(
            "Culture:",
            ["Toutes"] + list(set(p['Culture'] for p in plantes_data))
        )
    
    # Appliquer les filtres
    filtered_plantes = plantes_data.copy()
    
    if family_filter != "Toutes":
        filtered_plantes = [p for p in filtered_plantes if p['Famille'] == family_filter]
    
    if rarity_filter != "Toutes":
        filtered_plantes = [p for p in filtered_plantes if p['Raret√©'] == rarity_filter]
    
    if culture_filter != "Toutes":
        filtered_plantes = [p for p in filtered_plantes if p['Culture'] == culture_filter]
    
    st.success(f"**{len(filtered_plantes)} plantes** correspondent √† vos crit√®res")
    
    # Affichage des plantes
    for i, plante in enumerate(filtered_plantes):
        with st.expander(f"üåø {plante['Plante']} - {plante['Nom Scientifique']}", expanded=i < 3):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown(f'<div class="plant-card">', unsafe_allow_html=True)
                st.write(f"**üî¨ Nom scientifique :** {plante['Nom Scientifique']}")
                st.write(f"**üåæ Famille :** {plante['Famille']}")
                st.write(f"**üçÉ Partie utilis√©e :** {plante['Partie Utilis√©e']}")
                st.write(f"**üëÖ Go√ªt :** {plante['Go√ªt']} (Intensit√©: {plante['Intensit√©']}/5)")
                st.write(f"**üè° Habitat :** {plante['Habitat']}")
                st.write(f"**üå± Culture :** {plante['Culture']}")
                st.write(f"**üìÖ Saison :** {plante['Saison']}")
                st.write(f"**‚ö†Ô∏è Contre-indications :** {plante['Contre-indications']}")
                st.write(f"**üì¶ Conservation :** {plante['Conservation']}")
                
                st.write("**üíö Propri√©t√©s :**")
                for propriete in plante['Propri√©t√©s']:
                    st.markdown(f'<span class="benefit-badge">{propriete}</span>', unsafe_allow_html=True)
                
                # Badges de source
                if plante['Source'] == 'APLAMEDOM':
                    st.markdown('<span class="source-badge">APLAMEDOM</span>', unsafe_allow_html=True)
                elif plante['Source'] == 'IRD ThesIndigo':
                    st.markdown('<span class="ird-badge">IRD ThesIndigo</span>', unsafe_allow_html=True)
                
                if plante['IRD_URI']:
                    st.markdown(f'<a href="{plante["IRD_URI"]}" target="_blank" class="ird-badge">IRD URI</a>', unsafe_allow_html=True)
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.metric("Popularit√©", f"{plante['Popularit√©']}/10")
                st.metric("Raret√©", f"{plante['Raret√©']}/5")
                st.metric("Intensit√©", f"{plante['Intensit√©']}/5")
                
                # Barre de progression pour la popularit√©
                st.write("**Popularit√© :**")
                popularity = plante.get('Popularit√©', 0)
                st.markdown(f"""
                <div style="background: #f0f0f0; border-radius: 10px; padding: 3px;">
                    <div style="background: linear-gradient(135deg, #2E8B57 0%, #4CAF50 100%); height: 6px; border-radius: 3px; width: {popularity * 10}%;"></div>
                </div>
                <small>{popularity}/10</small>
                """, unsafe_allow_html=True)
                
                if st.button("‚≠ê Ajouter aux favoris", key=f"fav_plant_{plante['Plante']}"):
                    if plante['Plante'] not in st.session_state.favorites:
                        st.session_state.favorites.append(plante['Plante'])
                        st.success("Ajout√© aux favoris!")
                    else:
                        st.info("D√©j√† dans vos favoris")

def show_favorites():
    st.markdown('<div class="section-header">‚≠ê Mes Favoris</div>', unsafe_allow_html=True)
    
    if not st.session_state.favorites:
        st.warning("Vous n'avez pas encore de favoris. Explorez les plantes et m√©langes pour en ajouter!")
        return
    
    st.success(f"**{len(st.session_state.favorites)} favoris** enregistr√©s")
    
    # S√©parer les plantes et les m√©langes
    favorite_plants = [p for p in st.session_state.favorites if any(p == plant['Plante'] for plant in plantes_data)]
    favorite_melanges = [m for m in st.session_state.favorites if any(m == melange['Nom'] for melange in melanges_data)]
    
    # Afficher les plantes favorites
    if favorite_plants:
        st.subheader("üåø Plantes Favorites")
        for plant_name in favorite_plants:
            plante = next((p for p in plantes_data if p['Plante'] == plant_name), None)
            if plante:
                with st.expander(f"üåø {plante['Plante']}", expanded=True):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.write(f"**Nom scientifique :** {plante['Nom Scientifique']}")
                        st.write(f"**Propri√©t√©s :** {', '.join(plante['Propri√©t√©s'])}")
                        st.write(f"**Go√ªt :** {plante['Go√ªt']}")
                    with col2:
                        if st.button("‚ùå Retirer", key=f"remove_plant_{plante['Plante']}"):
                            st.session_state.favorites.remove(plante['Plante'])
                            st.experimental_rerun()
    
    # Afficher les m√©langes favorites
    if favorite_melanges:
        st.subheader("üçµ M√©langes Favorites")
        for melange_name in favorite_melanges:
            melange = next((m for m in melanges_data if m['Nom'] == melange_name), None)
            if melange:
                with st.expander(f"üçµ {melange['Nom']}", expanded=True):
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.write(f"**Plantes :** {', '.join(melange['Plantes'])}")
                        st.write(f"**Bienfaits :** {', '.join(melange['Bienfaits'])}")
                        st.write(f"**Instructions :** {melange['Instructions']}")
                    with col2:
                        if st.button("‚ùå Retirer", key=f"remove_melange_{melange['Nom']}"):
                            st.session_state.favorites.remove(melange['Nom'])
                            st.experimental_rerun()

# Interface principale
def main():
    # Header principal avec navigation
    st.markdown('<h1 class="main-header">üåø TISANES R√âUNIONNAISES</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">Plateforme Expert de Connaissances Traditionnelles et Scientifiques</p>', unsafe_allow_html=True)
    
    # Navigation simplifi√©e
    nav_options = ["üè† Tableau de Bord", "üîç Recherche Avanc√©e", "üß™ M√©langes", "üåø Plantes", "‚≠ê Favoris"]
    
    selected_nav = st.radio("Navigation:", nav_options, horizontal=True)
    
    # Sections principales
    if selected_nav == "üè† Tableau de Bord":
        show_dashboard()
    elif selected_nav == "üîç Recherche Avanc√©e":
        show_advanced_search()
    elif selected_nav == "üß™ M√©langes":
        show_melanges_advanced()
    elif selected_nav == "üåø Plantes":
        show_plantes_advanced()
    elif selected_nav == "‚≠ê Favoris":
        show_favorites()

def show_dashboard():
    st.markdown('<div class="section-header">üìä Tableau de Bord Interactif</div>', unsafe_allow_html=True)
    
    # M√©triques en temps r√©el
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Plantes Document√©es", len(plantes_data))
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("M√©langes Traditionnels", len(melanges_data))
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.metric("Favoris Utilisateurs", len(st.session_state.favorites))
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        total_searches = len(st.session_state.search_history)
        st.metric("Recherches", total_searches)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Graphiques principaux
    col1, col2 = st.columns(2)
    
    with col1:
        st.plotly_chart(create_plant_network_graph(), use_container_width=True)
    
    with col2:
        # Graphique des bienfaits les plus populaires
        all_benefits = []
        for melange in melanges_data:
            all_benefits.extend(melange['Bienfaits'])
        
        benefit_counts = pd.Series(all_benefits).value_counts()
        
        fig = px.bar(
            x=benefit_counts.values,
            y=benefit_counts.index,
            orientation='h',
            title="Bienfaits les Plus Courants",
            color=benefit_counts.values,
            color_continuous_scale='Viridis'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Derni√®res activit√©s
    st.markdown('<div class="section-header">üìà Activit√© R√©cente</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîç Derni√®res Recherches")
        if st.session_state.search_history:
            for search in st.session_state.search_history[-5:]:
                st.write(f"‚Ä¢ {search}")
        else:
            st.write("Aucune recherche r√©cente")
    
    with col2:
        st.subheader("‚≠ê Derniers Favoris")
        if st.session_state.favorites:
            for fav in st.session_state.favorites[-3:]:
                st.write(f"‚Ä¢ {fav}")
        else:
            st.write("Aucun favori")

# Lancement de l'application
if __name__ == "__main__":
    main()
